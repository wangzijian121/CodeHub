/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MyMapRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6888929248871495891L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MyMapRecord\",\"fields\":[{\"name\":\"myMap\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> myMap;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public MyMapRecord() {}

  /**
   * All-args constructor.
   */
  public MyMapRecord(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> myMap) {
    this.myMap = myMap;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return myMap;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: myMap = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'myMap' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMyMap() {
    return myMap;
  }

  /**
   * Sets the value of the 'myMap' field.
   * @param value the value to set.
   */
  public void setMyMap(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.myMap = value;
  }

  /**
   * Creates a new MyMapRecord RecordBuilder.
   * @return A new MyMapRecord RecordBuilder
   */
  public static MyMapRecord.Builder newBuilder() {
    return new MyMapRecord.Builder();
  }
  
  /**
   * Creates a new MyMapRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MyMapRecord RecordBuilder
   */
  public static MyMapRecord.Builder newBuilder(MyMapRecord.Builder other) {
    return new MyMapRecord.Builder(other);
  }
  
  /**
   * Creates a new MyMapRecord RecordBuilder by copying an existing MyMapRecord instance.
   * @param other The existing instance to copy.
   * @return A new MyMapRecord RecordBuilder
   */
  public static MyMapRecord.Builder newBuilder(MyMapRecord other) {
    return new MyMapRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for MyMapRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MyMapRecord>
    implements org.apache.avro.data.RecordBuilder<MyMapRecord> {

    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> myMap;

    /** Creates a new Builder */
    private Builder() {
      super(MyMapRecord.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(MyMapRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.myMap)) {
        this.myMap = data().deepCopy(fields()[0].schema(), other.myMap);
        fieldSetFlags()[0] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing MyMapRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(MyMapRecord other) {
            super(MyMapRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.myMap)) {
        this.myMap = data().deepCopy(fields()[0].schema(), other.myMap);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'myMap' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMyMap() {
      return myMap;
    }

    /**
      * Sets the value of the 'myMap' field.
      * @param value The value of 'myMap'.
      * @return This builder.
      */
    public MyMapRecord.Builder setMyMap(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.myMap = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'myMap' field has been set.
      * @return True if the 'myMap' field has been set, false otherwise.
      */
    public boolean hasMyMap() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'myMap' field.
      * @return This builder.
      */
    public MyMapRecord.Builder clearMyMap() {
      myMap = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public MyMapRecord build() {
      try {
        MyMapRecord record = new MyMapRecord();
        record.myMap = fieldSetFlags()[0] ? this.myMap : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
